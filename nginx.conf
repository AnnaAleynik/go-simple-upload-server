user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
  worker_connections  1024;
}
http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
  access_log  /var/log/nginx/access.log  main;
  sendfile        on;
  keepalive_timeout  65;

  upstream files_upstream {
    server files-service:25478;
  }

  server {
    # listen 443 ssl http2 default_server;
    # listen [::]:443 ssl http2 default_server;
    # server_name my.domain.com;

    # if ($host != "my.domain.com") {
    #   return 403;
    # }

    # ssl_certificate         /etc/nginx/ssl/cert.pem;
    # ssl_certificate_key     /etc/nginx/ssl/key.pem;

    # # enable session resumption to improve https performance
    # # http://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077.html
    # ssl_session_cache shared:ssl_session_cache:50m;
    # ssl_session_timeout 1d;
    # ssl_session_tickets off;

    # # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits

    # # enables server-side protection from BEAST attacks
    # # http://blog.ivanristic.com/2013/09/is-beast-still-a-threat.html
    # ssl_prefer_server_ciphers on;
    # # disable SSLv3(enabled by default since nginx 0.8.19) since it's less secure then TLS http://en.wikipedia.org/wiki/Secure_Sockets_Layer#SSL_3.0
    # ssl_protocols TLSv1.2 TLSv1.3;
    # # ciphers chosen for forward secrecy and compatibility
    # # http://blog.ivanristic.com/2013/08/configuring-apache-nginx-and-openssl-for-forward-secrecy.html
    # ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305: ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

    # resolver 127.0.0.11 ipv6=off;

    # location /_files-service/ {
    #   internal;

    #   auth_request /verifytoken;
    #   auth_request_set $auth_status $upstream_status;

    #   rewrite ^/_(.*) /$1  break;

    #   proxy_hide_header Access-Control-Allow-Origin; 
    #   add_header Access-Control-Allow-Origin * always;

    #   proxy_pass http://files_upstream;
    # }

    location /api/v0/files-service/ {
      proxy_hide_header Access-Control-Allow-Origin; 
      add_header Access-Control-Allow-Origin * always;

      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, PUT, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,X-Request-ID,Authorization';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
      }

      rewrite ^/api/v0/(.*) /_$1 last;
      proxy_pass http://files_upstream;
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/share/nginx/html;
    }
  }
}